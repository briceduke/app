// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    relationMode = "prisma"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id              String    @id @default(cuid())
    tagline         String?
    username        String?   @unique
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    onboarded       Boolean   @default(false)
    accounts        Account[]
    sessions        Session[]
    verified        Boolean @default(false)

    outfitPostCount Int @default(0)
    hoodiePostCount Int @default(0)
    shirtPostCount  Int @default(0)
    pantsPostCount  Int @default(0)
    shoesPostCount  Int @default(0)
    watchPostCount  Int @default(0)
    imageCount      Int @default(0)
    likeCount       Int @default(0)

    links          Link[]

    posts           Post[]
    likedBy         User[]    @relation("Likes")
    liked           User[]    @relation("Likes")
}

model Link {
    id          String   @id @default(cuid())
    type        LinkType
    url         String

    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Post {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    type       PostType
    image      String?

    @@index([userId])
}

enum PostType {
    OUTFIT
    HOODIE
    SHIRT
    PANTS
    SHOES
    WATCH
}

enum LinkType {
    INSTAGRAM
    TWITTER
    YOUTUBE
    TIKTOK
    DISCORD
    WEBSITE
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
